import reclass Item:    def __init__(self, size: str, count: str, area: str, surface_area: str, categoriser):        self._size = size        self._count = count        self._area = area        self._surface_area = surface_area        self._categoriser = categoriser    @property    def category(self):        return self._categoriser.evaluate(self.max_width, self.max_height)    @property    def max_width(self):        size = self.size        return float(max(size[0][0], size[1][0]))    @property    def max_height(self):        size = self.size        return float(max(size[0][1], size[1][1]))    @property    def area(self):        search = re.findall(r'(\d+.\d*)', str(self._area))        if len(search) != 0:            return float(search[0])        return 0    @property    def size(self):        if self._size is not None:            size_values = tuple(self._size.split('-'))            if len(size_values) == 2:                return tuple(size_values[0].split('x')), tuple(size_values[1].split('x'))        return (0, 0), (0, 0)    @property    def surface_area(self):        search = re.findall(r'(\d+.\d*)', str(self._surface_area))        if len(search) != 0:            return float(search[0])        return 0    @property    def count(self):        return int(self._count)    @property    def boq_area(self):        return max(self.area, self.surface_area)